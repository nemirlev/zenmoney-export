// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	interfaces "github.com/nemirlev/zenmoney-export/v2/internal/interfaces"
	mock "github.com/stretchr/testify/mock"

	models "github.com/nemirlev/zenmoney-go-sdk/v2/models"

	time "time"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Close provides a mock function with given fields: ctx
func (_m *Storage) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAccount provides a mock function with given fields: ctx, account
func (_m *Storage) CreateAccount(ctx context.Context, account *models.Account) error {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Account) error); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBudget provides a mock function with given fields: ctx, budget
func (_m *Storage) CreateBudget(ctx context.Context, budget *models.Budget) error {
	ret := _m.Called(ctx, budget)

	if len(ret) == 0 {
		panic("no return value specified for CreateBudget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Budget) error); ok {
		r0 = rf(ctx, budget)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCompany provides a mock function with given fields: ctx, company
func (_m *Storage) CreateCompany(ctx context.Context, company *models.Company) error {
	ret := _m.Called(ctx, company)

	if len(ret) == 0 {
		panic("no return value specified for CreateCompany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Company) error); ok {
		r0 = rf(ctx, company)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCountry provides a mock function with given fields: ctx, country
func (_m *Storage) CreateCountry(ctx context.Context, country *models.Country) error {
	ret := _m.Called(ctx, country)

	if len(ret) == 0 {
		panic("no return value specified for CreateCountry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Country) error); ok {
		r0 = rf(ctx, country)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateInstrument provides a mock function with given fields: ctx, instrument
func (_m *Storage) CreateInstrument(ctx context.Context, instrument *models.Instrument) error {
	ret := _m.Called(ctx, instrument)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstrument")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Instrument) error); ok {
		r0 = rf(ctx, instrument)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateMerchant provides a mock function with given fields: ctx, merchant
func (_m *Storage) CreateMerchant(ctx context.Context, merchant *models.Merchant) error {
	ret := _m.Called(ctx, merchant)

	if len(ret) == 0 {
		panic("no return value specified for CreateMerchant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Merchant) error); ok {
		r0 = rf(ctx, merchant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateReminder provides a mock function with given fields: ctx, reminder
func (_m *Storage) CreateReminder(ctx context.Context, reminder *models.Reminder) error {
	ret := _m.Called(ctx, reminder)

	if len(ret) == 0 {
		panic("no return value specified for CreateReminder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Reminder) error); ok {
		r0 = rf(ctx, reminder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateReminderMarker provides a mock function with given fields: ctx, marker
func (_m *Storage) CreateReminderMarker(ctx context.Context, marker *models.ReminderMarker) error {
	ret := _m.Called(ctx, marker)

	if len(ret) == 0 {
		panic("no return value specified for CreateReminderMarker")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ReminderMarker) error); ok {
		r0 = rf(ctx, marker)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTag provides a mock function with given fields: ctx, tag
func (_m *Storage) CreateTag(ctx context.Context, tag *models.Tag) error {
	ret := _m.Called(ctx, tag)

	if len(ret) == 0 {
		panic("no return value specified for CreateTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Tag) error); ok {
		r0 = rf(ctx, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTransaction provides a mock function with given fields: ctx, tx
func (_m *Storage) CreateTransaction(ctx context.Context, tx *models.Transaction) error {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Transaction) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *Storage) CreateUser(ctx context.Context, user *models.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAccount provides a mock function with given fields: ctx, id
func (_m *Storage) DeleteAccount(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBudget provides a mock function with given fields: ctx, userID, tagID, date
func (_m *Storage) DeleteBudget(ctx context.Context, userID int, tagID string, date time.Time) error {
	ret := _m.Called(ctx, userID, tagID, date)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBudget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, time.Time) error); ok {
		r0 = rf(ctx, userID, tagID, date)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCompany provides a mock function with given fields: ctx, id
func (_m *Storage) DeleteCompany(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCompany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCountry provides a mock function with given fields: ctx, id
func (_m *Storage) DeleteCountry(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCountry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteInstrument provides a mock function with given fields: ctx, id
func (_m *Storage) DeleteInstrument(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstrument")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMerchant provides a mock function with given fields: ctx, id
func (_m *Storage) DeleteMerchant(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMerchant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteObjects provides a mock function with given fields: ctx, deletions
func (_m *Storage) DeleteObjects(ctx context.Context, deletions []models.Deletion) error {
	ret := _m.Called(ctx, deletions)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObjects")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Deletion) error); ok {
		r0 = rf(ctx, deletions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReminder provides a mock function with given fields: ctx, id
func (_m *Storage) DeleteReminder(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReminder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReminderMarker provides a mock function with given fields: ctx, id
func (_m *Storage) DeleteReminderMarker(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReminderMarker")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTag provides a mock function with given fields: ctx, id
func (_m *Storage) DeleteTag(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTransaction provides a mock function with given fields: ctx, id
func (_m *Storage) DeleteTransaction(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *Storage) DeleteUser(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccount provides a mock function with given fields: ctx, id
func (_m *Storage) GetAccount(ctx context.Context, id string) (*models.Account, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Account, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Account); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBudget provides a mock function with given fields: ctx, userID, tagID, date
func (_m *Storage) GetBudget(ctx context.Context, userID int, tagID string, date time.Time) (*models.Budget, error) {
	ret := _m.Called(ctx, userID, tagID, date)

	if len(ret) == 0 {
		panic("no return value specified for GetBudget")
	}

	var r0 *models.Budget
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, time.Time) (*models.Budget, error)); ok {
		return rf(ctx, userID, tagID, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, time.Time) *models.Budget); ok {
		r0 = rf(ctx, userID, tagID, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Budget)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, time.Time) error); ok {
		r1 = rf(ctx, userID, tagID, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompany provides a mock function with given fields: ctx, id
func (_m *Storage) GetCompany(ctx context.Context, id int) (*models.Company, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCompany")
	}

	var r0 *models.Company
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.Company, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Company); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Company)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountry provides a mock function with given fields: ctx, id
func (_m *Storage) GetCountry(ctx context.Context, id int) (*models.Country, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCountry")
	}

	var r0 *models.Country
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.Country, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Country); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Country)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstrument provides a mock function with given fields: ctx, id
func (_m *Storage) GetInstrument(ctx context.Context, id int) (*models.Instrument, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetInstrument")
	}

	var r0 *models.Instrument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.Instrument, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.Instrument); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Instrument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastSyncStatus provides a mock function with given fields: ctx
func (_m *Storage) GetLastSyncStatus(ctx context.Context) (interfaces.SyncStatus, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLastSyncStatus")
	}

	var r0 interfaces.SyncStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (interfaces.SyncStatus, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) interfaces.SyncStatus); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(interfaces.SyncStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMerchant provides a mock function with given fields: ctx, id
func (_m *Storage) GetMerchant(ctx context.Context, id string) (*models.Merchant, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetMerchant")
	}

	var r0 *models.Merchant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Merchant, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Merchant); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Merchant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReminder provides a mock function with given fields: ctx, id
func (_m *Storage) GetReminder(ctx context.Context, id string) (*models.Reminder, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetReminder")
	}

	var r0 *models.Reminder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Reminder, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Reminder); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Reminder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReminderMarker provides a mock function with given fields: ctx, id
func (_m *Storage) GetReminderMarker(ctx context.Context, id string) (*models.ReminderMarker, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetReminderMarker")
	}

	var r0 *models.ReminderMarker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.ReminderMarker, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.ReminderMarker); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ReminderMarker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTag provides a mock function with given fields: ctx, id
func (_m *Storage) GetTag(ctx context.Context, id string) (*models.Tag, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTag")
	}

	var r0 *models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Tag, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Tag); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransaction provides a mock function with given fields: ctx, id
func (_m *Storage) GetTransaction(ctx context.Context, id string) (*models.Transaction, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTransaction")
	}

	var r0 *models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Transaction, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Transaction); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *Storage) GetUser(ctx context.Context, id int) (*models.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*models.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *models.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccounts provides a mock function with given fields: ctx, filter
func (_m *Storage) ListAccounts(ctx context.Context, filter interfaces.Filter) ([]models.Account, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListAccounts")
	}

	var r0 []models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) ([]models.Account, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) []models.Account); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBudgets provides a mock function with given fields: ctx, filter
func (_m *Storage) ListBudgets(ctx context.Context, filter interfaces.Filter) ([]models.Budget, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListBudgets")
	}

	var r0 []models.Budget
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) ([]models.Budget, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) []models.Budget); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Budget)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCompanies provides a mock function with given fields: ctx, filter
func (_m *Storage) ListCompanies(ctx context.Context, filter interfaces.Filter) ([]models.Company, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListCompanies")
	}

	var r0 []models.Company
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) ([]models.Company, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) []models.Company); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Company)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCountries provides a mock function with given fields: ctx, filter
func (_m *Storage) ListCountries(ctx context.Context, filter interfaces.Filter) ([]models.Country, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListCountries")
	}

	var r0 []models.Country
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) ([]models.Country, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) []models.Country); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Country)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstruments provides a mock function with given fields: ctx, filter
func (_m *Storage) ListInstruments(ctx context.Context, filter interfaces.Filter) ([]models.Instrument, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListInstruments")
	}

	var r0 []models.Instrument
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) ([]models.Instrument, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) []models.Instrument); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Instrument)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMerchants provides a mock function with given fields: ctx, filter
func (_m *Storage) ListMerchants(ctx context.Context, filter interfaces.Filter) ([]models.Merchant, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListMerchants")
	}

	var r0 []models.Merchant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) ([]models.Merchant, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) []models.Merchant); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Merchant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReminderMarkers provides a mock function with given fields: ctx, filter
func (_m *Storage) ListReminderMarkers(ctx context.Context, filter interfaces.Filter) ([]models.ReminderMarker, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListReminderMarkers")
	}

	var r0 []models.ReminderMarker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) ([]models.ReminderMarker, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) []models.ReminderMarker); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ReminderMarker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReminders provides a mock function with given fields: ctx, filter
func (_m *Storage) ListReminders(ctx context.Context, filter interfaces.Filter) ([]models.Reminder, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListReminders")
	}

	var r0 []models.Reminder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) ([]models.Reminder, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) []models.Reminder); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Reminder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTags provides a mock function with given fields: ctx, filter
func (_m *Storage) ListTags(ctx context.Context, filter interfaces.Filter) ([]models.Tag, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListTags")
	}

	var r0 []models.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) ([]models.Tag, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) []models.Tag); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTransactions provides a mock function with given fields: ctx, filter
func (_m *Storage) ListTransactions(ctx context.Context, filter interfaces.Filter) ([]models.Transaction, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListTransactions")
	}

	var r0 []models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) ([]models.Transaction, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) []models.Transaction); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: ctx, filter
func (_m *Storage) ListUsers(ctx context.Context, filter interfaces.Filter) ([]models.User, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) ([]models.User, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.Filter) []models.User); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interfaces.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *Storage) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: ctx, response
func (_m *Storage) Save(ctx context.Context, response *models.Response) error {
	ret := _m.Called(ctx, response)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Response) error); ok {
		r0 = rf(ctx, response)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveAccounts provides a mock function with given fields: ctx, accounts
func (_m *Storage) SaveAccounts(ctx context.Context, accounts []models.Account) error {
	ret := _m.Called(ctx, accounts)

	if len(ret) == 0 {
		panic("no return value specified for SaveAccounts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Account) error); ok {
		r0 = rf(ctx, accounts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveBudgets provides a mock function with given fields: ctx, budgets
func (_m *Storage) SaveBudgets(ctx context.Context, budgets []models.Budget) error {
	ret := _m.Called(ctx, budgets)

	if len(ret) == 0 {
		panic("no return value specified for SaveBudgets")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Budget) error); ok {
		r0 = rf(ctx, budgets)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveCompanies provides a mock function with given fields: ctx, companies
func (_m *Storage) SaveCompanies(ctx context.Context, companies []models.Company) error {
	ret := _m.Called(ctx, companies)

	if len(ret) == 0 {
		panic("no return value specified for SaveCompanies")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Company) error); ok {
		r0 = rf(ctx, companies)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveCountries provides a mock function with given fields: ctx, countries
func (_m *Storage) SaveCountries(ctx context.Context, countries []models.Country) error {
	ret := _m.Called(ctx, countries)

	if len(ret) == 0 {
		panic("no return value specified for SaveCountries")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Country) error); ok {
		r0 = rf(ctx, countries)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveInstruments provides a mock function with given fields: ctx, instruments
func (_m *Storage) SaveInstruments(ctx context.Context, instruments []models.Instrument) error {
	ret := _m.Called(ctx, instruments)

	if len(ret) == 0 {
		panic("no return value specified for SaveInstruments")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Instrument) error); ok {
		r0 = rf(ctx, instruments)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveMerchants provides a mock function with given fields: ctx, merchants
func (_m *Storage) SaveMerchants(ctx context.Context, merchants []models.Merchant) error {
	ret := _m.Called(ctx, merchants)

	if len(ret) == 0 {
		panic("no return value specified for SaveMerchants")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Merchant) error); ok {
		r0 = rf(ctx, merchants)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveReminderMarkers provides a mock function with given fields: ctx, markers
func (_m *Storage) SaveReminderMarkers(ctx context.Context, markers []models.ReminderMarker) error {
	ret := _m.Called(ctx, markers)

	if len(ret) == 0 {
		panic("no return value specified for SaveReminderMarkers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.ReminderMarker) error); ok {
		r0 = rf(ctx, markers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveReminders provides a mock function with given fields: ctx, reminders
func (_m *Storage) SaveReminders(ctx context.Context, reminders []models.Reminder) error {
	ret := _m.Called(ctx, reminders)

	if len(ret) == 0 {
		panic("no return value specified for SaveReminders")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Reminder) error); ok {
		r0 = rf(ctx, reminders)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveSyncStatus provides a mock function with given fields: ctx, status
func (_m *Storage) SaveSyncStatus(ctx context.Context, status interfaces.SyncStatus) error {
	ret := _m.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for SaveSyncStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interfaces.SyncStatus) error); ok {
		r0 = rf(ctx, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTags provides a mock function with given fields: ctx, tags
func (_m *Storage) SaveTags(ctx context.Context, tags []models.Tag) error {
	ret := _m.Called(ctx, tags)

	if len(ret) == 0 {
		panic("no return value specified for SaveTags")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Tag) error); ok {
		r0 = rf(ctx, tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTransactions provides a mock function with given fields: ctx, transactions
func (_m *Storage) SaveTransactions(ctx context.Context, transactions []models.Transaction) error {
	ret := _m.Called(ctx, transactions)

	if len(ret) == 0 {
		panic("no return value specified for SaveTransactions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Transaction) error); ok {
		r0 = rf(ctx, transactions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUsers provides a mock function with given fields: ctx, users
func (_m *Storage) SaveUsers(ctx context.Context, users []models.User) error {
	ret := _m.Called(ctx, users)

	if len(ret) == 0 {
		panic("no return value specified for SaveUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.User) error); ok {
		r0 = rf(ctx, users)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccount provides a mock function with given fields: ctx, account
func (_m *Storage) UpdateAccount(ctx context.Context, account *models.Account) error {
	ret := _m.Called(ctx, account)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Account) error); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBudget provides a mock function with given fields: ctx, budget
func (_m *Storage) UpdateBudget(ctx context.Context, budget *models.Budget) error {
	ret := _m.Called(ctx, budget)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBudget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Budget) error); ok {
		r0 = rf(ctx, budget)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCompany provides a mock function with given fields: ctx, company
func (_m *Storage) UpdateCompany(ctx context.Context, company *models.Company) error {
	ret := _m.Called(ctx, company)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCompany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Company) error); ok {
		r0 = rf(ctx, company)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCountry provides a mock function with given fields: ctx, country
func (_m *Storage) UpdateCountry(ctx context.Context, country *models.Country) error {
	ret := _m.Called(ctx, country)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCountry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Country) error); ok {
		r0 = rf(ctx, country)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateInstrument provides a mock function with given fields: ctx, instrument
func (_m *Storage) UpdateInstrument(ctx context.Context, instrument *models.Instrument) error {
	ret := _m.Called(ctx, instrument)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInstrument")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Instrument) error); ok {
		r0 = rf(ctx, instrument)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMerchant provides a mock function with given fields: ctx, merchant
func (_m *Storage) UpdateMerchant(ctx context.Context, merchant *models.Merchant) error {
	ret := _m.Called(ctx, merchant)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMerchant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Merchant) error); ok {
		r0 = rf(ctx, merchant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateReminder provides a mock function with given fields: ctx, reminder
func (_m *Storage) UpdateReminder(ctx context.Context, reminder *models.Reminder) error {
	ret := _m.Called(ctx, reminder)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReminder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Reminder) error); ok {
		r0 = rf(ctx, reminder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateReminderMarker provides a mock function with given fields: ctx, marker
func (_m *Storage) UpdateReminderMarker(ctx context.Context, marker *models.ReminderMarker) error {
	ret := _m.Called(ctx, marker)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReminderMarker")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ReminderMarker) error); ok {
		r0 = rf(ctx, marker)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTag provides a mock function with given fields: ctx, tag
func (_m *Storage) UpdateTag(ctx context.Context, tag *models.Tag) error {
	ret := _m.Called(ctx, tag)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Tag) error); ok {
		r0 = rf(ctx, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTransaction provides a mock function with given fields: ctx, tx
func (_m *Storage) UpdateTransaction(ctx context.Context, tx *models.Transaction) error {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Transaction) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *Storage) UpdateUser(ctx context.Context, user *models.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
