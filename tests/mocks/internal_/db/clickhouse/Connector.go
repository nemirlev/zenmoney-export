// Code generated by mockery v2.43.1. DO NOT EDIT.

package clickhouse

import (
	clickhouse "github.com/ClickHouse/clickhouse-go/v2"

	driver "github.com/ClickHouse/clickhouse-go/v2/lib/driver"

	mock "github.com/stretchr/testify/mock"
)

// Connector is an autogenerated mock type for the Connector type
type Connector struct {
	mock.Mock
}

type Connector_Expecter struct {
	mock *mock.Mock
}

func (_m *Connector) EXPECT() *Connector_Expecter {
	return &Connector_Expecter{mock: &_m.Mock}
}

// Open provides a mock function with given fields: options
func (_m *Connector) Open(options *clickhouse.Options) (driver.Conn, error) {
	ret := _m.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 driver.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(*clickhouse.Options) (driver.Conn, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*clickhouse.Options) driver.Conn); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(*clickhouse.Options) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connector_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type Connector_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - options *clickhouse.Options
func (_e *Connector_Expecter) Open(options interface{}) *Connector_Open_Call {
	return &Connector_Open_Call{Call: _e.mock.On("Open", options)}
}

func (_c *Connector_Open_Call) Run(run func(options *clickhouse.Options)) *Connector_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*clickhouse.Options))
	})
	return _c
}

func (_c *Connector_Open_Call) Return(_a0 driver.Conn, _a1 error) *Connector_Open_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Connector_Open_Call) RunAndReturn(run func(*clickhouse.Options) (driver.Conn, error)) *Connector_Open_Call {
	_c.Call.Return(run)
	return _c
}

// NewConnector creates a new instance of Connector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnector(t interface {
	mock.TestingT
	Cleanup(func())
}) *Connector {
	mock := &Connector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
