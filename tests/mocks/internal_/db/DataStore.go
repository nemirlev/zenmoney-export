// Code generated by mockery v2.43.1. DO NOT EDIT.

package db

import (
	zenapi "github.com/nemirlev/zenapi"
	mock "github.com/stretchr/testify/mock"
)

// DataStore is an autogenerated mock type for the DataStore type
type DataStore struct {
	mock.Mock
}

type DataStore_Expecter struct {
	mock *mock.Mock
}

func (_m *DataStore) EXPECT() *DataStore_Expecter {
	return &DataStore_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: data
func (_m *DataStore) Delete(data *zenapi.Deletion) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*zenapi.Deletion) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type DataStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - data *zenapi.Deletion
func (_e *DataStore_Expecter) Delete(data interface{}) *DataStore_Delete_Call {
	return &DataStore_Delete_Call{Call: _e.mock.On("Delete", data)}
}

func (_c *DataStore_Delete_Call) Run(run func(data *zenapi.Deletion)) *DataStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*zenapi.Deletion))
	})
	return _c
}

func (_c *DataStore_Delete_Call) Return(_a0 error) *DataStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataStore_Delete_Call) RunAndReturn(run func(*zenapi.Deletion) error) *DataStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: data
func (_m *DataStore) Save(data *zenapi.Response) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*zenapi.Response) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataStore_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type DataStore_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - data *zenapi.Response
func (_e *DataStore_Expecter) Save(data interface{}) *DataStore_Save_Call {
	return &DataStore_Save_Call{Call: _e.mock.On("Save", data)}
}

func (_c *DataStore_Save_Call) Run(run func(data *zenapi.Response)) *DataStore_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*zenapi.Response))
	})
	return _c
}

func (_c *DataStore_Save_Call) Return(_a0 error) *DataStore_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataStore_Save_Call) RunAndReturn(run func(*zenapi.Response) error) *DataStore_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: data
func (_m *DataStore) Update(data interface{}) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type DataStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - data interface{}
func (_e *DataStore_Expecter) Update(data interface{}) *DataStore_Update_Call {
	return &DataStore_Update_Call{Call: _e.mock.On("Update", data)}
}

func (_c *DataStore_Update_Call) Run(run func(data interface{})) *DataStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *DataStore_Update_Call) Return(_a0 error) *DataStore_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataStore_Update_Call) RunAndReturn(run func(interface{}) error) *DataStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewDataStore creates a new instance of DataStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataStore {
	mock := &DataStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
