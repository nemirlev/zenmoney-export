// Code generated by mockery v2.43.1. DO NOT EDIT.

package driver

import (
	driver "github.com/ClickHouse/clickhouse-go/v2/lib/driver"
	mock "github.com/stretchr/testify/mock"
)

// Batch is an autogenerated mock type for the Batch type
type Batch struct {
	mock.Mock
}

type Batch_Expecter struct {
	mock *mock.Mock
}

func (_m *Batch) EXPECT() *Batch_Expecter {
	return &Batch_Expecter{mock: &_m.Mock}
}

// Abort provides a mock function with given fields:
func (_m *Batch) Abort() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Abort")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Batch_Abort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Abort'
type Batch_Abort_Call struct {
	*mock.Call
}

// Abort is a helper method to define mock.On call
func (_e *Batch_Expecter) Abort() *Batch_Abort_Call {
	return &Batch_Abort_Call{Call: _e.mock.On("Abort")}
}

func (_c *Batch_Abort_Call) Run(run func()) *Batch_Abort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Batch_Abort_Call) Return(_a0 error) *Batch_Abort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Batch_Abort_Call) RunAndReturn(run func() error) *Batch_Abort_Call {
	_c.Call.Return(run)
	return _c
}

// Append provides a mock function with given fields: v
func (_m *Batch) Append(v ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, v...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(v...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Batch_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type Batch_Append_Call struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - v ...interface{}
func (_e *Batch_Expecter) Append(v ...interface{}) *Batch_Append_Call {
	return &Batch_Append_Call{Call: _e.mock.On("Append",
		append([]interface{}{}, v...)...)}
}

func (_c *Batch_Append_Call) Run(run func(v ...interface{})) *Batch_Append_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Batch_Append_Call) Return(_a0 error) *Batch_Append_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Batch_Append_Call) RunAndReturn(run func(...interface{}) error) *Batch_Append_Call {
	_c.Call.Return(run)
	return _c
}

// AppendStruct provides a mock function with given fields: v
func (_m *Batch) AppendStruct(v interface{}) error {
	ret := _m.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for AppendStruct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Batch_AppendStruct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendStruct'
type Batch_AppendStruct_Call struct {
	*mock.Call
}

// AppendStruct is a helper method to define mock.On call
//   - v interface{}
func (_e *Batch_Expecter) AppendStruct(v interface{}) *Batch_AppendStruct_Call {
	return &Batch_AppendStruct_Call{Call: _e.mock.On("AppendStruct", v)}
}

func (_c *Batch_AppendStruct_Call) Run(run func(v interface{})) *Batch_AppendStruct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Batch_AppendStruct_Call) Return(_a0 error) *Batch_AppendStruct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Batch_AppendStruct_Call) RunAndReturn(run func(interface{}) error) *Batch_AppendStruct_Call {
	_c.Call.Return(run)
	return _c
}

// Column provides a mock function with given fields: _a0
func (_m *Batch) Column(_a0 int) driver.BatchColumn {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Column")
	}

	var r0 driver.BatchColumn
	if rf, ok := ret.Get(0).(func(int) driver.BatchColumn); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.BatchColumn)
		}
	}

	return r0
}

// Batch_Column_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Column'
type Batch_Column_Call struct {
	*mock.Call
}

// Column is a helper method to define mock.On call
//   - _a0 int
func (_e *Batch_Expecter) Column(_a0 interface{}) *Batch_Column_Call {
	return &Batch_Column_Call{Call: _e.mock.On("Column", _a0)}
}

func (_c *Batch_Column_Call) Run(run func(_a0 int)) *Batch_Column_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *Batch_Column_Call) Return(_a0 driver.BatchColumn) *Batch_Column_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Batch_Column_Call) RunAndReturn(run func(int) driver.BatchColumn) *Batch_Column_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function with given fields:
func (_m *Batch) Flush() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Batch_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type Batch_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *Batch_Expecter) Flush() *Batch_Flush_Call {
	return &Batch_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *Batch_Flush_Call) Run(run func()) *Batch_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Batch_Flush_Call) Return(_a0 error) *Batch_Flush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Batch_Flush_Call) RunAndReturn(run func() error) *Batch_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// IsSent provides a mock function with given fields:
func (_m *Batch) IsSent() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsSent")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Batch_IsSent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSent'
type Batch_IsSent_Call struct {
	*mock.Call
}

// IsSent is a helper method to define mock.On call
func (_e *Batch_Expecter) IsSent() *Batch_IsSent_Call {
	return &Batch_IsSent_Call{Call: _e.mock.On("IsSent")}
}

func (_c *Batch_IsSent_Call) Run(run func()) *Batch_IsSent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Batch_IsSent_Call) Return(_a0 bool) *Batch_IsSent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Batch_IsSent_Call) RunAndReturn(run func() bool) *Batch_IsSent_Call {
	_c.Call.Return(run)
	return _c
}

// Rows provides a mock function with given fields:
func (_m *Batch) Rows() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rows")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Batch_Rows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rows'
type Batch_Rows_Call struct {
	*mock.Call
}

// Rows is a helper method to define mock.On call
func (_e *Batch_Expecter) Rows() *Batch_Rows_Call {
	return &Batch_Rows_Call{Call: _e.mock.On("Rows")}
}

func (_c *Batch_Rows_Call) Run(run func()) *Batch_Rows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Batch_Rows_Call) Return(_a0 int) *Batch_Rows_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Batch_Rows_Call) RunAndReturn(run func() int) *Batch_Rows_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields:
func (_m *Batch) Send() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Batch_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type Batch_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
func (_e *Batch_Expecter) Send() *Batch_Send_Call {
	return &Batch_Send_Call{Call: _e.mock.On("Send")}
}

func (_c *Batch_Send_Call) Run(run func()) *Batch_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Batch_Send_Call) Return(_a0 error) *Batch_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Batch_Send_Call) RunAndReturn(run func() error) *Batch_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewBatch creates a new instance of Batch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBatch(t interface {
	mock.TestingT
	Cleanup(func())
}) *Batch {
	mock := &Batch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
