// Code generated by mockery v2.43.1. DO NOT EDIT.

package driver

import mock "github.com/stretchr/testify/mock"

// BatchColumn is an autogenerated mock type for the BatchColumn type
type BatchColumn struct {
	mock.Mock
}

type BatchColumn_Expecter struct {
	mock *mock.Mock
}

func (_m *BatchColumn) EXPECT() *BatchColumn_Expecter {
	return &BatchColumn_Expecter{mock: &_m.Mock}
}

// Append provides a mock function with given fields: _a0
func (_m *BatchColumn) Append(_a0 interface{}) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BatchColumn_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type BatchColumn_Append_Call struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *BatchColumn_Expecter) Append(_a0 interface{}) *BatchColumn_Append_Call {
	return &BatchColumn_Append_Call{Call: _e.mock.On("Append", _a0)}
}

func (_c *BatchColumn_Append_Call) Run(run func(_a0 interface{})) *BatchColumn_Append_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *BatchColumn_Append_Call) Return(_a0 error) *BatchColumn_Append_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BatchColumn_Append_Call) RunAndReturn(run func(interface{}) error) *BatchColumn_Append_Call {
	_c.Call.Return(run)
	return _c
}

// AppendRow provides a mock function with given fields: _a0
func (_m *BatchColumn) AppendRow(_a0 interface{}) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AppendRow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BatchColumn_AppendRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendRow'
type BatchColumn_AppendRow_Call struct {
	*mock.Call
}

// AppendRow is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *BatchColumn_Expecter) AppendRow(_a0 interface{}) *BatchColumn_AppendRow_Call {
	return &BatchColumn_AppendRow_Call{Call: _e.mock.On("AppendRow", _a0)}
}

func (_c *BatchColumn_AppendRow_Call) Run(run func(_a0 interface{})) *BatchColumn_AppendRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *BatchColumn_AppendRow_Call) Return(_a0 error) *BatchColumn_AppendRow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BatchColumn_AppendRow_Call) RunAndReturn(run func(interface{}) error) *BatchColumn_AppendRow_Call {
	_c.Call.Return(run)
	return _c
}

// NewBatchColumn creates a new instance of BatchColumn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBatchColumn(t interface {
	mock.TestingT
	Cleanup(func())
}) *BatchColumn {
	mock := &BatchColumn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
