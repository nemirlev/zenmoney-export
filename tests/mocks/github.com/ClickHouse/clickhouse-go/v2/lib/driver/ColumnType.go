// Code generated by mockery v2.43.1. DO NOT EDIT.

package driver

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"
)

// ColumnType is an autogenerated mock type for the ColumnType type
type ColumnType struct {
	mock.Mock
}

type ColumnType_Expecter struct {
	mock *mock.Mock
}

func (_m *ColumnType) EXPECT() *ColumnType_Expecter {
	return &ColumnType_Expecter{mock: &_m.Mock}
}

// DatabaseTypeName provides a mock function with given fields:
func (_m *ColumnType) DatabaseTypeName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DatabaseTypeName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ColumnType_DatabaseTypeName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DatabaseTypeName'
type ColumnType_DatabaseTypeName_Call struct {
	*mock.Call
}

// DatabaseTypeName is a helper method to define mock.On call
func (_e *ColumnType_Expecter) DatabaseTypeName() *ColumnType_DatabaseTypeName_Call {
	return &ColumnType_DatabaseTypeName_Call{Call: _e.mock.On("DatabaseTypeName")}
}

func (_c *ColumnType_DatabaseTypeName_Call) Run(run func()) *ColumnType_DatabaseTypeName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ColumnType_DatabaseTypeName_Call) Return(_a0 string) *ColumnType_DatabaseTypeName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ColumnType_DatabaseTypeName_Call) RunAndReturn(run func() string) *ColumnType_DatabaseTypeName_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *ColumnType) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ColumnType_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type ColumnType_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *ColumnType_Expecter) Name() *ColumnType_Name_Call {
	return &ColumnType_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *ColumnType_Name_Call) Run(run func()) *ColumnType_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ColumnType_Name_Call) Return(_a0 string) *ColumnType_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ColumnType_Name_Call) RunAndReturn(run func() string) *ColumnType_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Nullable provides a mock function with given fields:
func (_m *ColumnType) Nullable() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Nullable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ColumnType_Nullable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Nullable'
type ColumnType_Nullable_Call struct {
	*mock.Call
}

// Nullable is a helper method to define mock.On call
func (_e *ColumnType_Expecter) Nullable() *ColumnType_Nullable_Call {
	return &ColumnType_Nullable_Call{Call: _e.mock.On("Nullable")}
}

func (_c *ColumnType_Nullable_Call) Run(run func()) *ColumnType_Nullable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ColumnType_Nullable_Call) Return(_a0 bool) *ColumnType_Nullable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ColumnType_Nullable_Call) RunAndReturn(run func() bool) *ColumnType_Nullable_Call {
	_c.Call.Return(run)
	return _c
}

// ScanType provides a mock function with given fields:
func (_m *ColumnType) ScanType() reflect.Type {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ScanType")
	}

	var r0 reflect.Type
	if rf, ok := ret.Get(0).(func() reflect.Type); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(reflect.Type)
		}
	}

	return r0
}

// ColumnType_ScanType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanType'
type ColumnType_ScanType_Call struct {
	*mock.Call
}

// ScanType is a helper method to define mock.On call
func (_e *ColumnType_Expecter) ScanType() *ColumnType_ScanType_Call {
	return &ColumnType_ScanType_Call{Call: _e.mock.On("ScanType")}
}

func (_c *ColumnType_ScanType_Call) Run(run func()) *ColumnType_ScanType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ColumnType_ScanType_Call) Return(_a0 reflect.Type) *ColumnType_ScanType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ColumnType_ScanType_Call) RunAndReturn(run func() reflect.Type) *ColumnType_ScanType_Call {
	_c.Call.Return(run)
	return _c
}

// NewColumnType creates a new instance of ColumnType. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewColumnType(t interface {
	mock.TestingT
	Cleanup(func())
}) *ColumnType {
	mock := &ColumnType{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
