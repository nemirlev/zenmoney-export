// Code generated by mockery v2.43.1. DO NOT EDIT.

package driver

import (
	context "context"

	driver "github.com/ClickHouse/clickhouse-go/v2/lib/driver"
	mock "github.com/stretchr/testify/mock"

	proto "github.com/ClickHouse/clickhouse-go/v2/lib/proto"
)

// Conn is an autogenerated mock type for the Conn type
type Conn struct {
	mock.Mock
}

type Conn_Expecter struct {
	mock *mock.Mock
}

func (_m *Conn) EXPECT() *Conn_Expecter {
	return &Conn_Expecter{mock: &_m.Mock}
}

// AsyncInsert provides a mock function with given fields: ctx, query, wait, args
func (_m *Conn) AsyncInsert(ctx context.Context, query string, wait bool, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, query, wait)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AsyncInsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, ...interface{}) error); ok {
		r0 = rf(ctx, query, wait, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Conn_AsyncInsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsyncInsert'
type Conn_AsyncInsert_Call struct {
	*mock.Call
}

// AsyncInsert is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - wait bool
//   - args ...interface{}
func (_e *Conn_Expecter) AsyncInsert(ctx interface{}, query interface{}, wait interface{}, args ...interface{}) *Conn_AsyncInsert_Call {
	return &Conn_AsyncInsert_Call{Call: _e.mock.On("AsyncInsert",
		append([]interface{}{ctx, query, wait}, args...)...)}
}

func (_c *Conn_AsyncInsert_Call) Run(run func(ctx context.Context, query string, wait bool, args ...interface{})) *Conn_AsyncInsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(bool), variadicArgs...)
	})
	return _c
}

func (_c *Conn_AsyncInsert_Call) Return(_a0 error) *Conn_AsyncInsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Conn_AsyncInsert_Call) RunAndReturn(run func(context.Context, string, bool, ...interface{}) error) *Conn_AsyncInsert_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *Conn) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Conn_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Conn_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Conn_Expecter) Close() *Conn_Close_Call {
	return &Conn_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Conn_Close_Call) Run(run func()) *Conn_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Conn_Close_Call) Return(_a0 error) *Conn_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Conn_Close_Call) RunAndReturn(run func() error) *Conn_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Contributors provides a mock function with given fields:
func (_m *Conn) Contributors() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Contributors")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Conn_Contributors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Contributors'
type Conn_Contributors_Call struct {
	*mock.Call
}

// Contributors is a helper method to define mock.On call
func (_e *Conn_Expecter) Contributors() *Conn_Contributors_Call {
	return &Conn_Contributors_Call{Call: _e.mock.On("Contributors")}
}

func (_c *Conn_Contributors_Call) Run(run func()) *Conn_Contributors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Conn_Contributors_Call) Return(_a0 []string) *Conn_Contributors_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Conn_Contributors_Call) RunAndReturn(run func() []string) *Conn_Contributors_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function with given fields: ctx, query, args
func (_m *Conn) Exec(ctx context.Context, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) error); ok {
		r0 = rf(ctx, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Conn_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type Conn_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *Conn_Expecter) Exec(ctx interface{}, query interface{}, args ...interface{}) *Conn_Exec_Call {
	return &Conn_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *Conn_Exec_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *Conn_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Conn_Exec_Call) Return(_a0 error) *Conn_Exec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Conn_Exec_Call) RunAndReturn(run func(context.Context, string, ...interface{}) error) *Conn_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: _a0
func (_m *Conn) Ping(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Conn_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type Conn_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *Conn_Expecter) Ping(_a0 interface{}) *Conn_Ping_Call {
	return &Conn_Ping_Call{Call: _e.mock.On("Ping", _a0)}
}

func (_c *Conn_Ping_Call) Run(run func(_a0 context.Context)) *Conn_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Conn_Ping_Call) Return(_a0 error) *Conn_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Conn_Ping_Call) RunAndReturn(run func(context.Context) error) *Conn_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareBatch provides a mock function with given fields: ctx, query, opts
func (_m *Conn) PrepareBatch(ctx context.Context, query string, opts ...driver.PrepareBatchOption) (driver.Batch, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PrepareBatch")
	}

	var r0 driver.Batch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...driver.PrepareBatchOption) (driver.Batch, error)); ok {
		return rf(ctx, query, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...driver.PrepareBatchOption) driver.Batch); ok {
		r0 = rf(ctx, query, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Batch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...driver.PrepareBatchOption) error); ok {
		r1 = rf(ctx, query, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Conn_PrepareBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareBatch'
type Conn_PrepareBatch_Call struct {
	*mock.Call
}

// PrepareBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - opts ...driver.PrepareBatchOption
func (_e *Conn_Expecter) PrepareBatch(ctx interface{}, query interface{}, opts ...interface{}) *Conn_PrepareBatch_Call {
	return &Conn_PrepareBatch_Call{Call: _e.mock.On("PrepareBatch",
		append([]interface{}{ctx, query}, opts...)...)}
}

func (_c *Conn_PrepareBatch_Call) Run(run func(ctx context.Context, query string, opts ...driver.PrepareBatchOption)) *Conn_PrepareBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]driver.PrepareBatchOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(driver.PrepareBatchOption)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Conn_PrepareBatch_Call) Return(_a0 driver.Batch, _a1 error) *Conn_PrepareBatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Conn_PrepareBatch_Call) RunAndReturn(run func(context.Context, string, ...driver.PrepareBatchOption) (driver.Batch, error)) *Conn_PrepareBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: ctx, query, args
func (_m *Conn) Query(ctx context.Context, query string, args ...interface{}) (driver.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 driver.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (driver.Rows, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) driver.Rows); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Conn_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Conn_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *Conn_Expecter) Query(ctx interface{}, query interface{}, args ...interface{}) *Conn_Query_Call {
	return &Conn_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *Conn_Query_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *Conn_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Conn_Query_Call) Return(_a0 driver.Rows, _a1 error) *Conn_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Conn_Query_Call) RunAndReturn(run func(context.Context, string, ...interface{}) (driver.Rows, error)) *Conn_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function with given fields: ctx, query, args
func (_m *Conn) QueryRow(ctx context.Context, query string, args ...interface{}) driver.Row {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 driver.Row
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) driver.Row); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Row)
		}
	}

	return r0
}

// Conn_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type Conn_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *Conn_Expecter) QueryRow(ctx interface{}, query interface{}, args ...interface{}) *Conn_QueryRow_Call {
	return &Conn_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *Conn_QueryRow_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *Conn_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Conn_QueryRow_Call) Return(_a0 driver.Row) *Conn_QueryRow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Conn_QueryRow_Call) RunAndReturn(run func(context.Context, string, ...interface{}) driver.Row) *Conn_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// Select provides a mock function with given fields: ctx, dest, query, args
func (_m *Conn) Select(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, dest, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) error); ok {
		r0 = rf(ctx, dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Conn_Select_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Select'
type Conn_Select_Call struct {
	*mock.Call
}

// Select is a helper method to define mock.On call
//   - ctx context.Context
//   - dest interface{}
//   - query string
//   - args ...interface{}
func (_e *Conn_Expecter) Select(ctx interface{}, dest interface{}, query interface{}, args ...interface{}) *Conn_Select_Call {
	return &Conn_Select_Call{Call: _e.mock.On("Select",
		append([]interface{}{ctx, dest, query}, args...)...)}
}

func (_c *Conn_Select_Call) Run(run func(ctx context.Context, dest interface{}, query string, args ...interface{})) *Conn_Select_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *Conn_Select_Call) Return(_a0 error) *Conn_Select_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Conn_Select_Call) RunAndReturn(run func(context.Context, interface{}, string, ...interface{}) error) *Conn_Select_Call {
	_c.Call.Return(run)
	return _c
}

// ServerVersion provides a mock function with given fields:
func (_m *Conn) ServerVersion() (*proto.ServerHandshake, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServerVersion")
	}

	var r0 *proto.ServerHandshake
	var r1 error
	if rf, ok := ret.Get(0).(func() (*proto.ServerHandshake, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *proto.ServerHandshake); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.ServerHandshake)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Conn_ServerVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerVersion'
type Conn_ServerVersion_Call struct {
	*mock.Call
}

// ServerVersion is a helper method to define mock.On call
func (_e *Conn_Expecter) ServerVersion() *Conn_ServerVersion_Call {
	return &Conn_ServerVersion_Call{Call: _e.mock.On("ServerVersion")}
}

func (_c *Conn_ServerVersion_Call) Run(run func()) *Conn_ServerVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Conn_ServerVersion_Call) Return(_a0 *proto.ServerHandshake, _a1 error) *Conn_ServerVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Conn_ServerVersion_Call) RunAndReturn(run func() (*proto.ServerHandshake, error)) *Conn_ServerVersion_Call {
	_c.Call.Return(run)
	return _c
}

// Stats provides a mock function with given fields:
func (_m *Conn) Stats() driver.Stats {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stats")
	}

	var r0 driver.Stats
	if rf, ok := ret.Get(0).(func() driver.Stats); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(driver.Stats)
	}

	return r0
}

// Conn_Stats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stats'
type Conn_Stats_Call struct {
	*mock.Call
}

// Stats is a helper method to define mock.On call
func (_e *Conn_Expecter) Stats() *Conn_Stats_Call {
	return &Conn_Stats_Call{Call: _e.mock.On("Stats")}
}

func (_c *Conn_Stats_Call) Run(run func()) *Conn_Stats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Conn_Stats_Call) Return(_a0 driver.Stats) *Conn_Stats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Conn_Stats_Call) RunAndReturn(run func() driver.Stats) *Conn_Stats_Call {
	_c.Call.Return(run)
	return _c
}

// NewConn creates a new instance of Conn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *Conn {
	mock := &Conn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
